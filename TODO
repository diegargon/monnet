** HIGH

* Agent: metodo para no spamear los logs si falla un ping
* Migrar Mysql a NewDatabase
* Migrar cfg a Config
* migrar lng a Lang
    $lang['L_'] to $lang::get['L_'] ? o lang::get['WORD'] and the L_
* creada config key allow_save_passwords para permitir guardar los password como de ansible y otros, ver mecanismo
* Tabla Event Tasks: Cuando recive un evento ejecuta un playbook establecido
        hid, event_name, playbook, last_execution
        En cada host se podra crear task por eventos. Los eventos/playbook generara un informe que podria
        consultarse o enviarse. ¿tabla informes?
* Track:  $cfg['tasks']
        Servicios: Lista de servicios del host
        Procesos especificos: Track create/stoped/restart
            ¿especicar procesos a monitorizar por nombre?
            crearian un evento especifico event_proc_$name
* TABLA TASK
  `id`
  `hid`             host id, ver posibilidad de rango en el futuro
  `pb_id`           playbook a ejecutar
  `trigger_type`    tipo de trigger manual/otra task/evento
  `last_triggered`  ultima vez que se ejecuto
  `task_name`       nombre comun
  `next_task`       encadena tareas por id
  `disable`         deshabilita la tarea

* Hosts/IPAM: Poder especificar a que device (switch/router) y numero puerto esta conectado.
    - Ir separando configuracion e inventory.
    - El rol switch/router seccion de dispositivos conectados.
    - Si es WiFi poder elegir algo como conectado a dispositivo wifi 'fijo' o 'movable'
* Auto Rrefresh en host details obtiene los mismos datos que host-details cosa que no es necesaria. separar
* Comprobar via ansible o agente si los equipos necesitan actualizarse.
* Playbook dmesg output actual y anterior para una posible petada. journalctl -k -b -1
    o /etc/systemd/journald.conf Storage=persistent
* Port test with http request

** LOW
* refresher: Si determinados elemento UI no esta visible saltarse la parte que procesa lo no visible
* Inventory: Checkboxes: Bastionado / Antivirus / Compliant
* [DB 0.35v] Network weight
* En el login opcionalmente que se puede adjuntar clave de descifrado, se guarda en COOKIE o SESSION
* Refrescado/Cli Update/Discovery Update: En vez de la fecha bola roja/verde si se pasa mas del tiempo configurado
* Ansible: Tema almacenar passwords
    Todos los passwd almacenados cifrados con maestra
    Variable mpass en /etc/monnet/  con el pass maestro permisos root
    El webui no puede acceder a esa contraseña sin ser por el gateway que tiene permisos para accceder a mpass
    Para encriptar una contraseña introducida por el usuario se la tiene que pasar al gateway y esta la
    encripta.
* Ansible: Opcion para actualizar todos los agentes
* Agent Host: Opcion despues del boot realizar/enviar infome (eventos creados)
* Agent Host/Ansible Reports: nojson reports field , genera un report si hay alguna alarma, ansible y email
* Split Configuration > Inventory
* TODO 1111: Filter/check values
* Ansible: Turn off Host/VM container (shutdown)
* Ansible: Turn On VM/Container Proxmox (on proxmox host)
* Ansible: Turn On VM/Container VMWare (on vmware host)
* Ansible: Filtros por categoria o sistema para playbooks
* Ansible: Hypervisor Proxmox crear vm/contaniner
* Ansible: Hypervisor VMWARE crear vm/contaniner
* Users management
* Cuando detecte una mac en otra red copiar los datos de host y quizas advertir de alguna forma
* Alert/Warn footer dropdown popup permitir limpiar alarma individual
* feedme y agente intercambian versiones de agente agent_min_version existe para que en caso de que el agente no cumpla
    min version no haga nada, el feedme deberia de notificarlo (corregir antes el log spam)
* Ansible/Feedme: Cambiar version a min_version que acepta feedme y configurar una var con agente_version_latest
    Configuracion: Automatic agent updates (si feedme detecta un agente en version antigua actualizarlo automaticamente
* Agent: El agente deberia enviar los logs al servidor.
* Ansible Raw: Al lanzar un ansible bloquear la interaccion hasta recibir la respuesta
* Upgrade system: Rewrite, mas robusto
* Puertos: Monitor field y solo monitorizar los especificos? tipos de monitorizacion "aviso" "crear evento para task"
    o opcion contraria, deshabilitar avisos por puerto
* cambiar alert y warn en host de tiny a int y guardar el id del log, cuando se hace ack comprobar si el id es
    el mismo y borrar la alarma.

** Undecided
* Private Notes config? el campo uid ya esta creado por si se quiere separar notas por usuario
* Email Alert Groups: Poder especificar un grupo de emails en vez de uno por uno el email un grupo.
* Host: Aviso si la latency es muy grande?
* Opcion del buscador cambie a buscar elementos en la pagina?
* Bell options term + onoff pref
* Config parar cronjob, poder cambiar jobs entre cron_hourly y demás
* Notes Private (uid)? Public (!uid)? , option for selected if notes are by user or global?
* everybody bookmarks items (uid = 0) y añadir personales con uid = user?
* Links comprobacion si funciona y una pequeña on/off señal?
* Ansible: ¿opcion para otros agentes tipo prometheus ?
* Agent: Opcion para renovar el token el UI y automaticamente cambiar el token en el host
* Si agente esta instalado ¿deshabilitar ping? ¿o mantenerlo por la latencia?
* Crear campo host user*password encoded?
* ¿Barra bookmarks?

** Backlog
* registrar por usuario cualquier cambio que se haga.
* admin user (puede editar) - standard user (solo ver)
* SNMP get mac
* host-details configuracion (select) enviar al cambiar
* Bookmarks mostrados como grid iconos (ahora) y poder cambia a lista de links
* [DB 0.35v] hosts->encrypted - [Contraseñas y datos cifrados] ?