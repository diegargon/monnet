name: Deploy phpunit
#
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: arc-runner-set-monnet
    
    services:
      mysql-service:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: monnetadmin
          MYSQL_DATABASE: monnet
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          -e MYSQL_ROOT_PASSWORD=monnetadmin 
          -e MYSQL_USER=root 
          -e MYSQL_PASSWORD=monnetadmin 
          -e MYSQL_DATABASE=monnet
          --entrypoint sh mysql:8 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
    steps:

      - name: Verify MySQL connection
        run: |
          sudo apt update
          sudo apt install -y mysql-client
          mysql --version
          mysql \
            --host 127.0.0.1 \
            --port 3306 \
            -uroot -psecret -e "SHOW DATABASES;"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Wait for MySQL to start
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -uroot -pmonnetadmin -e "SELECT 1;" >/dev/null 2>&1; then
              echo "MySQL is up and running!"
              break
            fi
            echo "Waiting for MySQL to start..."
            sleep 2
          done
      - name: Build Docker image
        run: docker build -t my-app:latest -f ci-docker/Dockerfile-phpunit .
        
      - name: Configure MySQL root user permissions
        run: |
          mysql -h 127.0.0.1 -uroot -pmonnetadmin -e "ALTER USER 'root'@'%' IDENTIFIED BY 'monnetadmin';"
          mysql -h 127.0.0.1 -uroot -pmonnetadmin -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;"
          mysql -h 127.0.0.1 -uroot -pmonnetadmin -e "FLUSH PRIVILEGES;"

      - name: Check MySQL logs
        run: docker logs $(docker ps -q -f name=mysql)

      - name: Check containers
        if: ${{ always() }}
        run: docker ps -a

      - name: Get IP addresses of all containers
        run: |
          echo "Container IP Addresses:"
          docker inspect -f '{{.Name}}: {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)

      - name: Run Docker container
        run: docker run --rm my-app:latest   